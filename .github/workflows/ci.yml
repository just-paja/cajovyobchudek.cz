---
name: Continuous integration
on:
  push:
    branches:
      - '**'
    tags:
      - 'v*'

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pipenv
          key: ${{ runner.os }}-${{ hashFiles('Pipfile.lock') }}
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - uses: dschep/install-pipenv-action@v1
      - uses: ./.github/actions/setup-ci
      - name: Test
        run: pipenv run pytest --cov-report=xml --cov-config=.coveragerc --cov="."

  analyze:
    name: Run static code analysis
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pipenv
          key: ${{ runner.os }}-${{ hashFiles('Pipfile.lock') }}
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - uses: dschep/install-pipenv-action@v1
      - uses: ./.github/actions/setup-ci
      - name: Static code analysis
        run: pipenv run prospector -s high

  build:
    name: Build package
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pipenv
          key: ${{ runner.os }}-${{ hashFiles('Pipfile.lock') }}
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - uses: dschep/install-pipenv-action@v1
      - uses: ./.github/actions/setup-ci
      - name: Compile messages
        run: pipenv run ./manage.py compilemessages
      - name: Lock requirements
        run: pipenv lock --requirements > requirements.txt
      - name: Compile artifacts
        run: pipenv run python setup.py sdist
      - name: Store package dist files
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist/
      - name: Store requirements
        uses: actions/upload-artifact@v2
        with:
          name: requirements
          path: requirements.txt

  build-image:
    name: Build image
    runs-on: ubuntu-20.04
    needs:
      - build
    steps:
      - uses: actions/checkout@v2
      - name: Download package dist files
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Download requirements
        uses: actions/download-artifact@v2
        with:
          name: requirements
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - name: Build docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: cajovyobchudek:${{ github.sha }}
          outputs: type=docker,dest=app.tar
      - name: Store image artifact
        uses: actions/upload-artifact@v2
        with:
          name: image-artifact
          path: app.tar

  deploy:
    name: Deploy docker container
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/master'
    environment: staging
    needs:
      - test
      - analyze
      - build-image
    steps:
      - uses: actions/checkout@v2
      - name: Download package dist files
        uses: actions/download-artifact@v2
        with:
          name: image-artifact
      - name: Validate deploy configuration
        uses: ansible/ansible-lint-action@master
        with:
          targets: deploy.yml
      - name: Install deploy dependencies
        run: ansible-galaxy install -r requirements-ansible.yml
      - name: Configure SSH
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_rsa
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
      - name: Deploy docker container
        env:
          ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
          AWS_S3_REGION_NAME: ${{ secrets.AWS_S3_REGION_NAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_USER: ${{ secrets.DB_USER }}
          DJANGO_ENVIRONMENT: staging
          RAVEN_DSN: ${{ secrets.RAVEN_DSN }}
          RECAPTCHA_PRIVATE_KEY: ${{ secrets.RECAPTCHA_PRIVATE_KEY }}
          RECAPTCHA_PUBLIC_KEY: ${{ secrets.RECAPTCHA_PUBLIC_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          echo -e "[web]\n${{ secrets.DEPLOY_HOST }}\n" > inventory
          ansible-playbook deploy.yml -i inventory
  
  migrate:
    name: Migrate database
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/master'
    environment: staging
    needs:
      - deploy
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pipenv
          key: ${{ runner.os }}-${{ hashFiles('Pipfile.lock') }}
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - uses: dschep/install-pipenv-action@v1
      - uses: ./.github/actions/setup-ci
      - name: Migrate database
        run: pipenv run ./manage.py migrate
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
          AWS_S3_REGION_NAME: ${{ secrets.AWS_S3_REGION_NAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_USER: ${{ secrets.DB_USER }}
          DJANGO_ENVIRONMENT: staging
          RAVEN_DSN: ${{ secrets.RAVEN_DSN }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}

  static:
    name: Deploy static files
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/master'
    environment: staging
    needs:
      - deploy
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pipenv
          key: ${{ runner.os }}-${{ hashFiles('Pipfile.lock') }}
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - uses: dschep/install-pipenv-action@v1
      - uses: ./.github/actions/setup-ci
      - name: Collect static files
        run: pipenv run ./manage.py collectstatic --no-input
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
          AWS_S3_REGION_NAME: ${{ secrets.AWS_S3_REGION_NAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_USER: ${{ secrets.DB_USER }}
          DJANGO_ENVIRONMENT: staging
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
